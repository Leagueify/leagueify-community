openapi: 3.1.0
info:
  version: 0.8.1
  title: Leagueify API
  summary: Open Source Sporting League Platform.
  description: Host your own sports league using Leagueify, the all-in-one league hosting platform.
  license:
    name: MIT
    identifier: MIT
    url: https://raw.githubusercontent.com/Leagueify/leagueify/main/LICENSE
contact:
    name: Leagueify Support
    url: https://github.com/Leagueify/leagueify/issues
    email: help@leagueify.org

servers:
  - url: http://localhost/api
    description: Dockerized Local Environment
  - url: http://localhost:8888/api
    description: Standalone Executable Local Environment

paths:
  /accounts:
    post:
      tags:
      - Accounts
      summary: Create Account
      description: '
        Create an account for the Leagueify platform. Accounts created before
        the email service is configured do not require verification. By default,
        account owners must be 18 years of age or older due to required waivers.
      '
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/account/creation"
      responses:
        201:
          $ref: "#/components/success/generic"
        400:
          $ref: "#/components/errors/badRequest"
  /accounts/login:
    post:
      tags:
      - Accounts
      summary: Account Login
      description: '
        Login to an account within the Leagueify platform. Accounts created
        before the email service is configured do not require verification. 
        Accounts that are flagged inactive are unavailable for login.
      '
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/account/login"
      responses:
        200:
          $ref: "#/components/success/login"
        400:
          $ref: "#/components/errors/badRequest"
        401:
          $ref: "#/components/errors/unauthorized"
  /accounts/logout:
    post:
      tags:
      - Accounts
      security:
        - bearerAuth: []
      summary: Account Logout
      description: '
        Logout of an account within the Leagueify platform. Currently, this has 
        no functionality other than validating authentication requirements on 
        routes.
      '
      responses:
        200:
          $ref: "#/components/success/generic"
        401:
          $ref: "#/components/errors/unauthorized"
  /accounts/{id}/activate:
    post:
      tags:
      - Accounts
      summary: Activate Account
      description: '
        Activate an account within the Leagueify platform. Accounts created before
         the email service is configured do not require verification, as they 
        automatically maked as active.
      '
      parameters:
        - name: id
          in: path
          description: Account ID to be verified
          required: true
          type: string
      responses:
        200:
          $ref: "#/components/success/generic"
        401:
          $ref: "#/components/errors/unauthorized"
  /divisions:
    get:
      tags:
      - Divisions
      summary: List Divisions
      description: ''
      responses:
        200:
          $ref: "#/components/success/seasons"
        404:
          $ref: "#/components/errors/not-found"
    post:
      tags:
      - Divisions
      security:
        - bearerAuth: []
      summary: Create Divisions
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/division/creation"
      responses:
        201:
          $ref: "#/components/success/created"
        400:
          $ref: "#/components/errors/badRequest"
        401:
          $ref: "#/components/errors/unauthorized"
        403:
          $ref: "#/components/errors/forbidden"

  /leagues:
    post:
      tags:
      - Leagues
      security:
        - bearerAuth: []
      summary: Create League
      description: '
        Create the league for the Leagueify platform. An account flagged as an
        admin is required to create the league.
      '
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/league/creation"
      responses:
        201:
          $ref: "#/components/success/created"
        400:
          $ref: "#/components/errors/badRequest"
        401:
          $ref: "#/components/errors/unauthorized"
        403:
          $ref: "#/components/errors/forbidden"
  /players:
    get:
      tags:
      - Players
      security:
        - bearerAuth: []
      summary: List Account Players
      description: ''
      responses:
        200:
          $ref: "#/components/success/players"
        401:
          $ref: "#/components/errors/unauthorized"
        404:
          $ref: "#/components/errors/not-found"
    post:
      tags:
      - Players
      security:
        - bearerAuth: []
      summary: Create Players
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/players/creation"
      responses:
        201:
          $ref: "#/components/success/created"
        400:
          $ref: "#/components/errors/badRequest"
        401:
          $ref: "#/components/errors/unauthorized"
  /players/{id}:
    delete:
      tags:
        - Players
      summary: Delete Player
      description: ''
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: playerID to Delete
          required: true
          type: string
      responses:
        204:
          description: Player Deleted
        401:
          $ref: "#/components/errors/unauthorized"
    get:
      tags:
      - Players
      security:
        - bearerAuth: []
      summary: Get Player Detail
      description: ''
      parameters:
        - name: id
          in: path
          description: Player to retrieve
          required: true
          type: string
      responses:
        200:
          $ref: "#/components/success/player"
        401:
          $ref: "#/components/errors/unauthorzied"
  /seasons:
    get:
      tags:
      - Seasons
      summary: List Seasons
      description: '
        List all league seasons for the Leagueify instance.
      '
      responses:
        200:
          $ref: "#/components/success/seasons"
        404:
          $ref: "#/components/errors/not-found"
    post:
      tags:
      - Seasons
      security:
        - bearerAuth: []
      summary: Create Season
      description: '
        Create a league season for the Leagueify instance. Requires dates for
        the season, along with dates that registration is available.
      '
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/season/creation"
      responses:
        201:
          $ref: "#/components/success/created"
        400:
          $ref: "#/components/errors/badRequest"
        403:
          $ref: "#/components/errors/forbidden"
  /seasons/{id}:
    get:
      tags:
      - Seasons
      summary: Get Season Detail
      description: '
        This endpoint will return all season specific detail.
      '
      parameters:
        - name: id
          in: path
          description: Season ID to be retrieved
          required: true
          type: string
      responses:
        200:
          $ref: "#/components/success/season"
        404:
          $ref: "#/components/errors/not-found"
    patch:
      tags:
      - Seasons
      security:
        - bearerAuth: []
      summary: Update Season
      description: '
        Update spcific season detail.
      '
      parameters:
        - name: id
          in: path
          description: Season to be updated
          required: true
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/season/creation"
      responses:
        200:
          $ref: "#/components/success/generic"
        400:
          $ref: "#/components/errors/badRequest"
        403:
          $ref: "#/components/errors/forbidden"
  /positions:
    get:
      tags:
      - Positions
      summary: List Positions
      description: '
        List all positions within the Leagueify instance. Positions are assigned
        to players during the registration process.
      '
      responses:
        200:
          $ref: "#/components/success/positions"
        404:
          $ref: "#/components/errors/not-found"
    post:
      tags:
      - Positions
      security:
        - bearerAuth: []
      summary: Create Positions
      description: '
        Create player positions that will be available within the leagueify
        instance.
      '
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/positions/creation"
      responses:
        201:
          $ref: "#/components/success/created"
        400:
          $ref: "#/components/errors/badRequest"
        403:
          $ref: "#/components/errors/forbidden"
  /sports:
    get:
      tags:
      - Sports
      security:
        - bearerAuth: []
      summary: List Sports
      description: '
        List all Leagueify supported sports.
      '
      responses:
        200:
          $ref: "#/components/success/sports-list"
        401:
          $ref: "#/components/errors/unauthorized"

components:
  # account
  account:
    creation:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - dateOfBirth
        - phone
      properties:
        firstName:
          description: User's first name
          type: string
          minLength: 2
          maxLength: 32
          example: John
        lastName:
          description: User's last name
          type: string
          minLength: 2
          maxLength: 32
          example: Doe
        email:
          description: Email associated to the account
          type: string
          example: test@leagueify.org
        password:
          description: Password for the associated account
          type: string
          example: Test123!
          minLength: 8
          maxLength: 64
        dateOfBirth:
          description: User's date of birth
          type: string
          example: "2000-01-01"
        phone:
          description: User's phone number
          type: string
          example: "+12085550000"
        coach:
          description: User's preference to coach
          type: boolean
          default: false
          example: true
        volunteer:
          description: User's preference to voluneer
          type: boolean
          default: false
          example: false
    login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          description: Email associated to the account
          type: string
          example: test@leagueify.org
        password:
          description: Password for the associated account
          type: string
          example: Test123!
          minLength: 8
          maxLength: 64
  division:
    creation:
      type: object
      properties:
        divisions:
          type: array
          description: Division Objects
          items:
            type: object
            required:
              - name
              - age
            properties:
              name:
                description: Division Name
                type: string
                example: Leagueify 18U
                minLength: 3
                maxLength: 32
              age:
                description: Division Age Object
                type: object
                required:
                  - min
                  - max
                properties:
                  min:
                    description: Minimum age for division
                    type: integer
                    example: 13
                  max:
                    description: Maximum age for division
                    type: integer
                    example: 18
  league:
    creation:
      type: object
      required:
        - name
        - sportID
      properties:
        name:
          description: League name
          type: string
          example: Leagueify Hockey League
          minLength: 3
          maxLength: 32
        sportID:
          description: Sport ID for the associated league
          type: string
          example: FGDR
  players:
    creation:
      type: object
      required:
        - players
      properties:
        players:
          description: Account players list
          type: array
          items:
            description: Player detail
            type: object
            required:
              - firstName
              - lastName
              - dateOfBirth
            properties:
              firstName:
                description: Player first name
                type: string
                minLength: 2
                maxLength: 32
                example: Jane
              lastName:
                description: Player last name
                type: string
                minLength: 2
                maxLength: 32
                example: Doe
              dateOfBirth:
                description: Player date of birth
                type: string
                example: 2020-03-06
  positions:
    creation:
      type: object
      required:
        - positions
      properties:
        positions:
          description: Position list
          type: array
          items:
            description: Position names
            type: string
          example:
            - Skater
            - Goalie
  season:
    creation:
      type: object
      required:
        - name
        - season
        - registration
      properties:
        name:
          description: Season Name
          type: string
          example: Leagueify 2024-2025
          minLength: 3
          maxLength: 32
        season:
          description: Season Dates
          type: object
          required:
            - start
            - end
          properties:
            start:
              description: Season Start Date
              type: string
              example: 2024-03-01
            end:
              description: Season End Date
              type: string
              example: 2024-05-01
        registration:
          description: Registration Dates
          type: object
          required:
            - start
            - end
          properties:
            start:
              description: Registration Start Date
              type: string
              example: 2024-01-01
            end:
              description: Registration End Date
              type: string
              example: 2024-03-01
  # error responses
  errors:
    badRequest:
      description: Error with request payload
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: bad request
              detail:
                description: Details related to request payload error
                type: string
                example: invalid json payload
    unauthorized:
      description: Unauthorized response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: unauthorized
    forbidden:
      description: forbidden response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: forbidden
    not-found:
      description: not found reponse
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: not found
  # successful responses
  success:
    created:
      description: Successfully created
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: created
    generic:
      description: Successful request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: ok
    login:
      description: Successfuly logged into account
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: ok
              detail:
                description: JWT Authentication Token
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc19hZG1pbiI6dHJ1ZSwic3ViIjoiNE40MUMzQzkiLCJhdWQiOlsiYXBpIl0sImV4cCI6MTcyNDM4MTA0MCwibmJmIjoxNzI0MzgwNjgwLCJpYXQiOjE3MjQzODA3NDB9.Zow0_O6ThgyxhdU1D1oF4ZlqCrXC2wvCvh88QIbEXRk
    player:
      description: List of account players
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: ok
              detail:
                description: Player Detail
                type: object
                properties:
                  id:
                    description: Player ID
                    type: string
                    example: 9NBKESVMQ6
                  parentID:
                    description: Parent ID
                    type: string
                    example: 5Y7BN6AG
                  firstName:
                    description: Player First Name
                    type: string
                    example: John
                  lastName:
                    description: Player Last Name
                    type: string
                    example: Doe
                  dateOfBirth:
                    description: Player Date of Birth
                    type: string
                    example: "2020-03-06"
                  divisionID:
                    description: Player Division
                    type: string
                    example: "123456"
                  teamID:
                    description: Player Team
                    type: string
                    example: "12345678"
                  isRegistered:
                    description: Player Registration Status
                    type: boolean
                    example: false
                  hash:
                    description: Player Hash
                    type: string
                    example: 8178fe39eca2e306530ad9660a637c008ab6af043b9b9667a9cdb936f33bcaa7
    players:
      description: List of account players
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: ok
              detail:
                description: List of player names and ids
                type: array
                items:
                  description: Player objects
                  type: object
                  properties:
                    id:
                      description: Player ID
                      type: string
                      example: C329VF
                    firstName:
                      description: Player First Name
                      type: string
                      example: John
                    lastName:
                      description: Player Last Name
                      type: string
                      example: Doe
    positions:
      description: League Positions
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: ok
              detail:
                description: List of available positions
                type: array
                items:
                  description: Position detail
                  type: object
                  properties:
                    id:
                      description: Position ID
                      type: string
                      example: XQSY
                    name:
                      description: Position Name
                      type: string
                      example: Goalie
    season:
      description: League Season Detail
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: ok
              detail:
                description: Detail of requested league season
                type: array
                items:
                  description: Season detail
                  type: object
                  properties:
                    name:
                      description: Season Name
                      type: string
                      example: Leagueify 2024-2025
                      minLength: 3
                      maxLength: 32
                    season:
                      description: Season Dates
                      type: object
                      required:
                        - start
                        - end
                      properties:
                        start:
                          description: Season Start Date
                          type: string
                          example: 2024-03-01
                        end:
                          description: Season End Date
                          type: string
                          example: 2024-05-01
                    registration:
                      description: Registration Dates
                      type: object
                      required:
                        - start
                        - end
                      properties:
                        start:
                          description: Registration Start Date
                          type: string
                          example: 2024-01-01
                        end:
                          description: Registration End Date
                          type: string
                          example: 2024-03-01
    seasons:
      description: List of League Seasons
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: ok
              detail:
                description: List of league season ids and names
                type: array
                items:
                  description: Season objects
                  type: object
                  properties:
                    id:
                      description: Season ID
                      type: string
                      example: C329VF
                    name:
                      description: Season Name
                      type: string
                      example: Leagueify 2024
    sports-list:
      description: Supported Leagueify Sports
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: HTTP status text
                type: string
                example: ok
              detail:
                description: List of Sport IDs for Leagueify
                type: array
                items:
                  description: Sport Objects
                  type: object
                  properties:
                    id:
                      description: Sport ID
                      type: string
                      example: 65
                    name:
                      description: Sport Name
                      type: string
                      example: Hockey
  # security schemes
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
